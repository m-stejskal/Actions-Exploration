name: Trigger On Push

on:
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  checkout-repository:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

  install-jq:
    runs-on: ubuntu-latest
    needs: checkout-repository
    steps:
      - name: Install jq
        run: sudo apt-get install jq

  execute-testset:
    environment: PROD
    env:
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      SCOPE: ${{ vars.API_SCOPE }}
      TOKEN_URL: ${{ vars.TOKEN_URL }}
      API_URL: ${{ vars.API_URL }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      TESTSET_ID: ${{ vars.TESTSET_ID }}
    runs-on: ubuntu-latest
    needs: install-jq
    outputs:
      execution_id: ${{ steps.execute-testset.outputs.execution_id }}
    steps:
      - name: Get API token
        run: |
          response=$(
            curl --silent --write-out "\n%{http_code}" \
              --request POST "$TOKEN_URL" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data "client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&grant_type=client_credentials&scope=$SCOPE"
          )
          
          status_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | sed '$d')

          if [ "$status_code" -eq 200 ]; then
            token=$(echo $response_body | jq -r '.access_token')
            echo "ACCESS_TOKEN=$token" >> $GITHUB_ENV
          else
            echo $response_body
            exit 1
          fi
          
      - name: Execute test set
        id: execute-testset
        run: |
          response=$(
            curl --silent --write-out "\n%{http_code}" \
              --request POST "$API_URL/$PROJECT_ID/TestSets/$TESTSET_ID/StartExecute?executionType=automated" \
              -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
              -H "Accept: application/json" \
              -H "Content-Length: 0"
          )

          status_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | sed '$d')

          if [ "$status_code" -eq 201 ]; then
            execution_id=$(echo $response_body | jq -r '.id')
            echo "Execution ID: $execution_id"
            echo "execution_id=$execution_id" >> "$GITHUB_OUTPUT"
          else
            echo $response_body
            exit 1
          fi

  check-execution:
    environment: PROD
    runs-on: ubuntu-latest
    needs: execute-testset
    env:
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      SCOPE: ${{ vars.API_SCOPE }}
      TOKEN_URL: ${{ vars.TOKEN_URL }}
      API_URL: ${{ vars.API_URL }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      TESTSET_ID: ${{ vars.TESTSET_ID }}

      RESULT_CHECK_MAX_COUNT: ${{ vars.RESULT_CHECK_MAX_COUNT }}
      RESULT_CHECK_FREQUENCY: ${{ vars.RESULT_CHECK_FREQUENCY }}

      EXECUTION_ID: ${{needs.execute-testset.outputs.execution_id}}

    steps:
      - name: Get API token
        run: |
          response=$(
            curl --silent --write-out "\n%{http_code}" \
              --request POST "$TOKEN_URL" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data "client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&grant_type=client_credentials&scope=$SCOPE"
          )
          
          status_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | sed '$d')

          if [ "$status_code" -eq 200 ]; then
            token=$(echo $response_body | jq -r '.access_token')
            echo "ACCESS_TOKEN=$token" >> $GITHUB_ENV
          else
            echo $response_body
            exit 1
          fi

      - name: Check execution status
        run: |

          for i in $(seq 1 $RESULT_CHECK_MAX_COUNT); do
            echo "Iteration number $i"

            response=$(
              curl --silent --write-out "\n%{http_code}" \
                --request GET "$API_URL/$PROJECT_ID/TestExecutions/${{ env.EXECUTION_ID }}/withstats" \
                -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
                -H "Accept: application/json" \
                -H "Content-Length: 0"
            )

            status_code=$(echo "$response" | tail -n1)
            response_body=$(echo "$response" | sed '$d')

            if [ "$status_code" -eq 200 ]; then
              execution_status=$(echo $response_body | jq -r '.status')
              echo $execution_status

              if [ "$execution_status" == "Pending" ]; then
                echo "Execution has not started yet"
              elif [ "$execution_status" == "Running" ]; then
                echo "Execution is still running"                
              elif [ "$execution_status" == "Finished" ]; then
                fail_count=$(echo $response_body | jq -r '.failed')
                echo "Execution finished"          
                echo "Failed cases: $fail_count"
                
                if [ "$execution_status" -eq 0 ]; then
                  exit 0
                else
                  exit 1
                fi

              elif [ "$execution_status" == "Cancelled" ]; then
                echo "Execution cancelled"
                exit 1
              fi
            else
              echo $response_body
              exit 1
            fi

            sleep $RESULT_CHECK_FREQUENCY
          done

  rollback:
    needs: check-execution
    if: needs.check-execution.result == 'failure'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rollback to previous version
        run: |
          # Retrieve the previous commit
          previous_commit=$(git rev-parse HEAD^)
          echo "Rollback to previous commit: $previous_commit"
          git checkout $previous_commit
          echo "Rollback job succeeded."
