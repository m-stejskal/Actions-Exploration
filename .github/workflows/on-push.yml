name: Trigger On Push

on:
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  checkout-repository:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

  install-jq:
    runs-on: ubuntu-latest
    needs: checkout-repository
    steps:
      - name: Install jq
        run: sudo apt-get install jq

  execute-testset:
    environment: PROD
    env:
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      SCOPE: ${{ vars.API_SCOPE }}
      TOKEN_URL: ${{ vars.TOKEN_URL }}
      API_URL: ${{ vars.API_URL }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      TESTSET_ID: ${{ vars.TESTSET_ID }}
    runs-on: ubuntu-latest
    needs: install-jq
    steps:
      - name: Get API token
        run: |
          response=$(
            curl --silent --write-out "\n%{http_code}" \
              --request POST "$TOKEN_URL" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data "client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&grant_type=client_credentials&scope=$SCOPE"
          )
          
          status_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | sed '$d')

          if [ "$status_code" -eq 200 ]; then
            token=$(echo $response_body | jq -r '.access_token')
            echo "ACCESS_TOKEN=$token" >> $GITHUB_ENV
          else
            echo $response_body
            exit 1
          fi
          
      - name: Execute test set
        run: |
          response=$(
            curl --silent --write-out "\n%{http_code}" \
              --request POST "$API_URL/$PROJECT_ID/TestSets/$TESTSET_ID/StartExecute?executionType=automated" \
              -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
              -H "Accept: application/json" \
              -H "Content-Length: 0"
          )

          status_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | sed '$d')

          if [ "$status_code" -eq 201 ]; then
            execution_id=$(echo $response_body | jq -r '.id')
            echo "EXECUTION_ID=$execution_id" >> $GITHUB_ENV
          else
            echo $response_body
            exit 1
          fi

      - name: Check execution status
        run: |
          response=$(
            curl --silent --write-out "\n%{http_code}" \
              --request POST "$API_URL/$PROJECT_ID/TestExecutions/$EXECUTION_ID" \
              -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
              -H "Accept: application/json"
          )

          status_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | sed '$d')

          if [ "$status_code" -eq 200 ]; then
            execution_status=$(echo $response_body | jq -r '.status')
            echo "EXECUTION_STATUS=$execution_status" >> $GITHUB_ENV
            echo $response_body
            echo $execution_status
          else
            echo $response_body
            exit 1
          fi

  check-execution:
    environment: PROD
    env:
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      SCOPE: ${{ vars.API_SCOPE }}
      TOKEN_URL: ${{ vars.TOKEN_URL }}
      API_URL: ${{ vars.API_URL }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      TESTSET_ID: ${{ vars.TESTSET_ID }}
    runs-on: ubuntu-latest
    needs: execute-testset
    steps:
      - name: Get API token
        run: |
          response=$(
            curl --silent --write-out "\n%{http_code}" \
              --request POST "$TOKEN_URL" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data "client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&grant_type=client_credentials&scope=$SCOPE"
          )
          
          status_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | sed '$d')

          if [ "$status_code" -eq 200 ]; then
            token=$(echo $response_body | jq -r '.access_token')
            echo "ACCESS_TOKEN=$token" >> $GITHUB_ENV
          else
            echo $response_body
            exit 1
          fi

      - name: Check execution status
        run: |
          response=$(
            curl --silent --write-out "\n%{http_code}" \
              --request POST "$API_URL/$PROJECT_ID/TestExecutions/$EXECUTION_ID" \
              -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
              -H "Accept: application/json" \
              -H "Content-Length: 0"
          )

          status_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | sed '$d')

          if [ "$status_code" -eq 200 ]; then
            execution_status=$(echo $response_body | jq -r '.status')
            echo "EXECUTION_STATUS=$execution_status" >> $GITHUB_ENV
            echo $response_body
            echo $execution_status
          else
            echo $response_body
            exit 1
          fi

